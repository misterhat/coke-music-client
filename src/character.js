const { createCanvas, colourizeImage } = require('./draw');
const { cssColor } = require('@swiftcarrot/color-fns');

const CHARACTER_HEIGHT = 102;

// size of base head sprite in spritesheet
const HEAD_WIDTH = 30;
const HEAD_HEIGHT = 32;

// amount to offset the head sprites on the base head image
const HEAD_OFFSET_X = 20;
const HEAD_OFFSET_Y = 19;

// size of hair and accessories
const HAIR_WIDTH = 70;
const HAIR_HEIGHT = 56;

// size of body in spritesheet
const BODY_WIDTH = 56;
const BODY_HEIGHT = 70;

// size of arms in spritesheet
const ARM_SIZE = 36;

// amount of sub-faces
const FACE_COUNT = 6;

// amount of sub-eyes
const EYE_COUNT = 5;

// amount of sub-bodies
const BODY_COUNT = 6;

// offsets for applying the head sprite to the final character sprite
const BODY_ANGLE_OFFSETS = [
    { x: 13, y: 43 },
    { x: 9, y: 42 },
    { x: 11, y: 46 },
    { x: 7, y: 43 },
    { x: 9, y: 43 }
];

// [deltaX][deltaY] = spriteOffset
// to determine which direction should display which sprite
const WALK_ANGLE_DELTAS = {
    '-1': {
        // west
        1: 1, // south
        '-1': 3, // north
        0: 2
    },
    1: {
        // east
        1: 4, // south
        '-1': 6, // north east
        0: 5
    },
    0: {
        1: 0, // south
        '-1': 7,
        0: 3
    }
};

// x offsets for post-rotated character sprites
const ROTATED_OFFSETS = [-16, -17, -13];

// { angle: [ { index: armIndex, x, y, rotate: false } ] }
// TODO make sub-arrays for animations
const ARM_OFFSETS = {
    0: [
        { index: 0, x: 12, y: 6 },
        { index: 2, x: -4, y: 5 }
    ],
    1: [{ index: 1, x: 5, y: 6 }],
    2: [
        { index: 4, x: 9, y: 3 },
        //{ index: 5, x: -2, y: 5 } right
        { index: 6, x: 0, y: 5 }
    ],
    3: [
        { index: 6, x: 1, y: 3 },
        { index: 6, x: 18, y: 3, rotate: true }
    ],
    4: [
        { index: 6, x: -2, y: 4 },
        { index: 6, x: 17, y: 4, rotate: true }
    ]
};

// ne, e, se, s, n, [sw, w nw]

class Character {
    constructor(game, room, appearance) {
        this.game = game;
        this.room = room;

        // isometric position
        this.x = 5;
        this.y = 10;

        this.drawX = 0;
        this.drawY = 0;

        this.image = this.game.images['/character_test.png'];

        this.isFemale = false;

        this.angle = 3;
        this.headIndex = 0;
        this.eyeIndex = 5;
        this.eyeSubIndex = 0;
        this.faceIndex = 2;
        this.faceSubIndex = 0;
        this.hairIndex = 5;
        this.eyeIndex = 1;
        this.eyeSubIndex = 0;
        this.hatIndex = -1;
        this.bodyIndex = 0;

        this.skinTone = 0.25;

        this.hairColour = cssColor('#ff0000');
        this.eyeColour = cssColor('#ffffff');
        //this.hatColour = cssColor('#ff0000');

        // ne, e, se, s, n, [sw, w nw] <- autogenerated
        this.sprites = {
            idle: [],
            sit: [],
            walk: []
        };

        this.generateSprites();

        // used to drag the sprite in animation
        this.toDrawX = 0;
        this.toDrawY = 0;

        this.drawOffsetX = 0;
        this.drawOffsetY = 0;

        this.toX = -1;
        this.toY = -1;

        this.walkSpeed = 4;
    }

    generateHeadSprite(angle) {
        // base canvas
        const { canvas: headSprite, context: headContext } = createCanvas(
            HAIR_WIDTH,
            HAIR_HEIGHT
        );

        // head
        headContext.drawImage(
            this.game.images['/character/heads.png'],
            angle * HEAD_WIDTH,
            this.headIndex * HEAD_HEIGHT,
            HEAD_WIDTH,
            HEAD_HEIGHT,
            HEAD_OFFSET_X,
            HEAD_OFFSET_Y,
            HEAD_WIDTH,
            HEAD_HEIGHT
        );

        // face
        if (angle !== 0 && angle !== 4) {
            headContext.drawImage(
                this.game.images['/character/faces.png'],
                (angle - 1) * HEAD_WIDTH,
                this.faceIndex * (HEAD_HEIGHT * FACE_COUNT) +
                    this.faceSubIndex * HEAD_HEIGHT,
                HEAD_WIDTH,
                HEAD_HEIGHT,
                HEAD_OFFSET_X,
                HEAD_OFFSET_Y,
                HEAD_WIDTH,
                HEAD_HEIGHT
            );
        }

        // skin tone
        headContext.fillStyle = '#000';
        headContext.globalCompositeOperation = 'source-atop';
        headContext.globalAlpha = this.skinTone;

        headContext.fillRect(
            HEAD_OFFSET_X,
            HEAD_OFFSET_Y,
            HEAD_WIDTH,
            HEAD_HEIGHT
        );

        headContext.globalCompositeOperation = 'source-over';
        headContext.globalAlpha = 1;

        // eyes
        if (angle !== 0 && angle !== 4) {
            const { canvas: eyeSprite, context: eyeContext } = createCanvas(
                HEAD_WIDTH,
                HEAD_HEIGHT
            );

            eyeContext.drawImage(
                this.game.images['/character/eyes.png'],
                (angle - 1) * HEAD_WIDTH,
                this.eyeIndex * (HEAD_HEIGHT * EYE_COUNT) +
                    this.eyeSubIndex * HEAD_HEIGHT,
                HEAD_WIDTH,
                HEAD_HEIGHT,
                0,
                0,
                HEAD_WIDTH,
                HEAD_HEIGHT
            );

            colourizeImage(eyeSprite, this.eyeColour);

            headContext.drawImage(eyeSprite, HEAD_OFFSET_X, HEAD_OFFSET_Y);
        }

        // hair
        const { canvas: hairSprite, context: hairContext } = createCanvas(
            HAIR_WIDTH,
            HAIR_HEIGHT
        );

        hairContext.drawImage(
            this.game.images['/character/hair.png'],
            angle * HAIR_WIDTH,
            this.hairIndex * HAIR_HEIGHT,
            HAIR_WIDTH,
            HAIR_HEIGHT,
            0,
            0,
            HAIR_WIDTH,
            HAIR_HEIGHT
        );

        colourizeImage(hairSprite, this.hairColour);

        headContext.drawImage(hairSprite, 0, 0);

        // hat
        if (this.hatIndex !== -1) {
            const { canvas: hatSprite, context: hatContext } = createCanvas(
                HAIR_WIDTH,
                HAIR_HEIGHT
            );

            hatContext.drawImage(
                this.game.images['/character/hats.png'],
                angle * HAIR_WIDTH,
                this.hatIndex * HAIR_HEIGHT,
                HAIR_WIDTH,
                HAIR_HEIGHT,
                0,
                0,
                HAIR_WIDTH,
                HAIR_HEIGHT
            );

            if (this.hatColour) {
                colourizeImage(hatSprite, this.hatColour);
            }

            headContext.drawImage(hatSprite, 0, 0);
        }

        return headSprite;
    }

    generateBodySprite(angle) {
        // base canvas
        const { canvas: bodySprite, context: bodyContext } = createCanvas(
            BODY_WIDTH,
            BODY_HEIGHT
        );

        bodyContext.drawImage(
            this.game.images['/character/bodies.png'],
            angle * BODY_WIDTH,
            (this.isFemale ? BODY_COUNT * BODY_HEIGHT : 0) +
                this.bodyIndex * BODY_HEIGHT,
            BODY_WIDTH,
            BODY_HEIGHT,
            0,
            0,
            BODY_WIDTH,
            BODY_HEIGHT
        );

        // arms
        for (const {
            index: armIndex,
            x: offsetX,
            y: offsetY,
            rotate
        } of ARM_OFFSETS[angle]) {
            const armCanvas = document.createElement('canvas');
            armCanvas.width = ARM_SIZE;
            armCanvas.height = ARM_SIZE;

            const armContext = armCanvas.getContext('2d');

            if (rotate) {
                armContext.translate(ARM_SIZE, 0);
                armContext.scale(-1, 1);
            }

            armContext.drawImage(
                this.game.images['/character/arms.png'],
                0,
                armIndex * ARM_SIZE,
                ARM_SIZE,
                ARM_SIZE,
                0,
                0,
                ARM_SIZE,
                ARM_SIZE
            );

            bodyContext.drawImage(
                armCanvas,
                0,
                0,
                ARM_SIZE,
                ARM_SIZE,
                offsetX,
                offsetY,
                ARM_SIZE,
                ARM_SIZE
            );
        }

        // skin tone
        bodyContext.fillStyle = '#000';
        bodyContext.globalCompositeOperation = 'source-atop';
        bodyContext.globalAlpha = this.skinTone;

        bodyContext.fillRect(0, 0, BODY_WIDTH, BODY_HEIGHT);

        bodyContext.globalCompositeOperation = 'source-over';
        bodyContext.globalAlpha = 1;

        return bodySprite;
    }

    generateSprites() {
        for (let angle = 0; angle < 5; angle += 1) {
            const baseSprite = document.createElement('canvas');

            baseSprite.width = 56;
            baseSprite.height = 116;

            const baseSpriteContext = baseSprite.getContext('2d');

            const bodySprite = this.generateBodySprite(angle);
            const headSprite = this.generateHeadSprite(angle);

            baseSpriteContext.drawImage(
                bodySprite,
                BODY_ANGLE_OFFSETS[angle].x,
                BODY_ANGLE_OFFSETS[angle].y
            );

            baseSpriteContext.drawImage(headSprite, 0, 0);

            this.sprites.idle.push(baseSprite);

            if (angle === 3) {
                this.image = baseSprite;
            }
        }

        for (let angle = 5; angle < 8; angle += 1) {
            const baseSprite = document.createElement('canvas');

            baseSprite.width = 56;
            baseSprite.height = 116;

            const baseSpriteContext = baseSprite.getContext('2d');

            baseSpriteContext.translate(baseSprite.width, 0);
            baseSpriteContext.scale(-1, 1);

            baseSpriteContext.drawImage(
                this.sprites.idle[angle - 5],
                ROTATED_OFFSETS[angle - 5],
                0
            );

            this.sprites.idle.push(baseSprite);
        }
    }

    generateArmSprites() {}

    move(x, y) {
        const deltaX = this.x - x;
        const deltaY = this.y - y;

        this.image = this.sprites.idle[WALK_ANGLE_DELTAS[deltaX][deltaY]];

        //this.x = x;
        //this.y = y;

        this.toX = x;
        this.toY = y;

        const { x: drawX, y: drawY } = this.room.isoToCoordinate(x, y);

        this.toDrawX = drawX;
        this.toDrawY = drawY - 116 + 28;

        const diffX = this.toDrawX - this.drawX;
        const diffY = this.toDrawY - this.drawY;

        const distance = Math.sqrt(diffX * diffX + diffY * diffY);

        this.toDrawDeltaX = diffX / distance;
        this.toDrawDeltaY = diffY / distance;

        this.drawOffsetX = 0;
        this.drawOffsetY = 0;
    }

    update() {
        let { x: drawX, y: drawY } = this.room.isoToCoordinate(this.x, this.y);

        drawY = drawY - 116 + 28;

        if (this.toX !== -1 || this.toY !== -1) {
            if (Math.floor(drawX + this.drawOffsetX) !== this.toDrawX) {
                this.drawOffsetX += this.toDrawDeltaX * this.walkSpeed;
            }

            if (Math.floor(drawY + this.drawOffsetY) !== this.toDrawY) {
                this.drawOffsetY += this.toDrawDeltaY * this.walkSpeed;
            }

            const diffX = this.toDrawX - (drawX + this.drawOffsetX);
            const diffY = this.toDrawY - (drawY + this.drawOffsetY);

            const distance = Math.sqrt(diffX * diffX + diffY * diffY);

            if (Math.floor(distance) === 0) {
                this.x = this.toX;
                this.y = this.toY;

                this.drawOffsetX = 0;
                this.drawOffsetY = 0;

                this.toX = -1;
                this.toY = -1;

                return this.update();
            }
        }

        this.drawX = drawX + this.drawOffsetX;
        this.drawY = drawY + this.drawOffsetY;
    }

    draw() {
        const { context } = this.game;
        context.drawImage(this.image, this.drawX, this.drawY);
    }
}

module.exports = Character;
